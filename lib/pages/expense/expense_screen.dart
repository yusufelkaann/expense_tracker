// pages/expense_entry_page.dart
import 'package:expense_tracker/models/expense_model.dart';
import 'package:expense_tracker/providers/auth_provider.dart';
import 'package:expense_tracker/providers/balance_provider.dart';
import 'package:expense_tracker/providers/expense_provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';


class ExpenseEntryPage extends StatelessWidget {
  final TextEditingController amountController = TextEditingController();
  String selectedType = 'Health';
  DateTime selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    final expenseProvider = Provider.of<ExpenseProvider>(context);
    final authProvider = Provider.of<AuthProviderr>(context);
    final balanceProvider = Provider.of<BalanceProvider>(context);
    final userId = authProvider.user?.uid; // Get the user ID

    return Scaffold(
      appBar: AppBar(
        title: Text('Add Expense'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: amountController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(labelText: 'Amount'),
            ),
            DropdownButton<String>(
              value: selectedType,
              onChanged: (String? newValue) {
                selectedType = newValue!;
              },
              items: <String>['Health', 'Food', 'House Bills', 'Entertainment', 'Education']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            TextButton(
              onPressed: () async {
                final DateTime? pickedDate = await showDatePicker(
                  context: context,
                  initialDate: selectedDate,
                  firstDate: DateTime(2000),
                  lastDate: DateTime(2101),
                );
                if (pickedDate != null && pickedDate != selectedDate) {
                  selectedDate = pickedDate;
                }
              },
              child: Text('Select Date: ${selectedDate.toLocal()}'.split(' ')[0]),
            ),
            ElevatedButton(
              onPressed: () {
                final double amount = double.tryParse(amountController.text.trim()) ?? 0.0;
                if (userId != null) { // Ensure userId is not null
                  final expense = Expense(
                    id: '', // ID will be generated by Firestore
                    amount: amount,
                    type: selectedType,
                    date: selectedDate,
                  );
                  expenseProvider.addExpense(expense, userId, balanceProvider); // Pass user ID
                  Navigator.pop(context);
                } else {
                  // Handle the case where the user is not logged in
                  print("User not logged in!");
                }
              },
              child: Text('Add Expense'),
            ),
          ],
        ),
      ),
    );
  }
}
